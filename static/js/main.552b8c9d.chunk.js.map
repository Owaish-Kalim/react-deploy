{"version":3,"sources":["components/Show.js","App.js","reportWebVitals.js","index.js"],"names":["Show","props","date","Date","data","lastUpdate","year","getFullYear","month","getMonth","dt","getDate","confirmed","deaths","critical","recovered","axios","require","App","useState","value","setValue","resp","setResp","options","useMemo","countryList","getData","Object","keys","length","console","log","style","textAlign","paddingLeft","width","onChange","label","uri","get","then","response","temp","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PA0BeA,MA1Bf,SAAcC,GAEV,IAAIC,EAAO,IAAIC,KAAKF,EAAMG,KAAKC,YAC3BC,EAAOJ,EAAKK,cACZC,EAAQN,EAAKO,WAAW,EACxBC,EAAKR,EAAKS,UASd,OAPID,EAAK,KACTA,EAAK,IAAMA,GAEPF,EAAQ,KACZA,EAAQ,IAAMA,GAIV,gCACI,+CAAkBP,EAAMG,KAAKQ,UAA7B,OACA,4CAAeX,EAAMG,KAAKS,OAA1B,OACA,8CAAiBZ,EAAMG,KAAKU,YAC5B,+CAAkBb,EAAMG,KAAKW,aAC7B,iDAAoBT,EAAK,IAAME,EAAQ,IAAIE,EAA3C,WCfNM,EAAQC,EAAQ,IAiDPC,MA7Cf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAUC,mBAAQ,kBAAMC,MAAcC,YAAW,IAwBvD,OAHgC,IAA7BC,OAAOC,KAAKP,GAAMQ,QACrBC,QAAQC,IAAI,QAASV,EAAK,GAAGV,WAG3B,gCACE,8BACE,oBAAIqB,MAAO,CAACC,UAAU,UAAtB,2CAEQ,KAAVd,EAAgB,oBAAIa,MAAO,CAACE,YAAa,QAAzB,gCAA6D,GAC9E,qBAAKF,MAAO,CAACG,MAAM,MAAOD,YAAY,QAAtC,SACC,cAAC,IAAD,CAAQX,QAASA,EAASJ,MAAOA,EAAOiB,SA7BtB,SAAAjB,GACpBW,QAAQC,IAAR,mBAAgCZ,EAAMkB,OACtCf,EAAQ,IAER,IAAMgB,EAXE,wCAWUnB,EAAMkB,MAAQ,eAEhCtB,EAAMwB,IAAID,GACTE,MAAK,SAAUC,GACdX,QAAQC,IAAIU,EAAStC,MACrB,IAAIuC,EAAOD,EAAStC,KACpBmB,EAAQoB,GACRZ,QAAQC,IAAI,SAAUV,MAEvBsB,OAAM,SAAUC,GACfd,QAAQC,IAAIa,MAEdxB,EAASD,QAeI,KAAVA,EAAgB,qBAAIa,MAAO,CAACE,YAAa,QAAzB,wBAA8Cf,EAAMkB,MAApD,OAAoE,GACvD,IAA7BV,OAAOC,KAAKP,GAAMQ,OAAe,cAAC,EAAD,CAAM1B,KAAMkB,EAAK,KAAS,OClCnDwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.552b8c9d.chunk.js","sourcesContent":["function Show(props) {\n\n    var date = new Date(props.data.lastUpdate);\n    var year = date.getFullYear();\n    var month = date.getMonth()+1;\n    var dt = date.getDate();\n\n    if (dt < 10) {\n    dt = '0' + dt;\n    }\n    if (month < 10) {\n    month = '0' + month;\n    }\n\n    return (\n        <div>\n            <ul> Confirmed : {props.data.confirmed} </ul>\n            <ul> Deaths : {props.data.deaths} </ul>\n            <ul> Critical : {props.data.critical}</ul>\n            <ul> Recovered : {props.data.recovered}</ul>\n            <ul> Last Update : {year+'-' + month + '-'+dt} </ul>\n            {/* <ul> Last Change : {props.data.lastChange} </ul> */}\n        </div>\n    )   \n}\n\nexport default Show","import React, { useState, useMemo } from 'react'\nimport Select from 'react-select'\nimport countryList from 'react-select-country-list'\nimport Pagination from './components/pagination';\nimport Show from './components/Show';\nconst axios = require('axios');\n\nconst url = 'https://covid19-api.com/country?name='\n\nfunction App() {\n  const [value, setValue] = useState('')\n  const [resp, setResp] = useState({});\n  const options = useMemo(() => countryList().getData(), []) \n\n  const changeHandler = value => { \n    console.log(`Option selected:`, value.label) ;  \n    setResp({}) ;\n\n    const uri = url + value.label + '&format=json'\n\n    axios.get(uri)\n    .then(function (response) { \n      console.log(response.data)\n      var temp = response.data \n      setResp(temp) ; \n      console.log('Owaish', resp) \n    })\n    .catch(function (error) {\n      console.log(error);\n    }) ;\n    setValue(value) \n  }\n\n  if(Object.keys(resp).length !== 0)\n  console.log('Kalim', resp[0].confirmed) \n\n  return (\n    <div>  \n      <div> \n        <h1 style={{textAlign:'center'}}> Countrywise Covid19 Cases </h1>\n      </div>\n     {value === '' ? (<h2 style={{paddingLeft: '20px'}}> Select a Country </h2>) : ''}\n     <div style={{width:'40%', paddingLeft:'20px'}}> \n      <Select options={options} value={value} onChange={changeHandler} />\n      </div>\n      {value !== '' ? (<h2 style={{paddingLeft: '20px'}}> Country : {value.label} </h2>) : ''} \n      {Object.keys(resp).length !== 0 ? <Show data={resp[0]} /> : ''} \n      {/* {value !== '' && resp.length === 0 && <h2 style={{textAlign:'center'}}> No Results Found </h2>} */}\n      {/* {resp.length !== 0 &&  <Pagination data = {resp} /> } */} \n    </div>\n  )\n  \n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}